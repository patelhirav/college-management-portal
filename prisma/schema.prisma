generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  SUB_ADMIN
  STUDENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String     @unique
  password     String
  role         Role
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  hodDepartment Department? @relation("HodDepartment")
  professor     Professor?
  student       Student?
}

model Department {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  hodId      String?     @unique @db.ObjectId
  hod        User?       @relation("HodDepartment", fields: [hodId], references: [id])
  professors Professor[]
  subjects   Subject[]
  students   Student[]
}

model Professor {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  userId       String             @unique @db.ObjectId
  user         User               @relation(fields: [userId], references: [id])
  departmentId String             @db.ObjectId
  department   Department         @relation(fields: [departmentId], references: [id])
  subjects     ProfessorSubject[]
  tasks        Task[]
  bio          ProfessorBio?
  isHod        Boolean          @default(false)

  @@index([departmentId])
}

type ProfessorBio {
  contact     String
  profession  String
  degree      String
  linkedin    String?
}

model Student {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @unique @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  semester        Int
  profilePhoto    String?
  departmentId    String           @db.ObjectId
  department      Department       @relation(fields: [departmentId], references: [id])
  taskAssignments TaskAssignment[]
  info            StudentInfo?

  @@index([departmentId])
  @@index([semester])
}

type StudentInfo {
  address       String
  mobile        String
  fatherName    String
  fatherMobile  String
  guardianName  String?
  city          String?
}

model Subject {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  semester     Int
  departmentId String             @db.ObjectId
  department   Department         @relation(fields: [departmentId], references: [id])
  professors   ProfessorSubject[]
  tasks        Task[]

  @@index([departmentId])
  @@index([semester])
}

model ProfessorSubject {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  professorId  String     @db.ObjectId
  subjectId    String     @db.ObjectId
  professor    Professor  @relation(fields: [professorId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])

  @@unique([professorId, subjectId])
  @@index([professorId])
  @@index([subjectId])
}

model Task {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  imageUrl        String?
  semester        Int
  subjectId       String           @db.ObjectId
  subject         Subject          @relation(fields: [subjectId], references: [id])
  professorId     String           @db.ObjectId
  professor       Professor        @relation(fields: [professorId], references: [id])
  dueDate       DateTime?
  createdAt       DateTime         @default(now())
  taskAssignments TaskAssignment[]

  @@index([semester])
  @@index([subjectId])
  @@index([professorId])
}

model TaskAssignment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  taskId        String      @db.ObjectId
  studentId     String      @db.ObjectId
  status        TaskStatus  @default(PENDING)
  submissionUrl String?
  dueDate       DateTime?
  updatedAt     DateTime    @updatedAt

  task          Task        @relation(fields: [taskId], references: [id])
  student       Student     @relation(fields: [studentId], references: [id])

  @@unique([taskId, studentId])
  @@index([taskId])
  @@index([studentId])
}
